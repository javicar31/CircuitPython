
'''
MODIFIED RP2040 Prop-Maker Feather Example
This guide explains how to control the various features of the Prop-Maker Feather.
You can easily change values in this code to customize your project.
'''

import time
import board
import audiocore
import audiobusio
import audiomixer
import pwmio
from digitalio import DigitalInOut, Direction, Pull
import neopixel
from adafruit_motor import servo
import adafruit_lis3dh

# --- HELPER FUNCTION ---
def map_range(x, in_min, in_max, out_min, out_max):
    """
    Maps a number from one range to another. This is a replacement for the
    function that was previously in the 'simpleio' library.
    """
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

# --- CONTROL TOGGLES ---
SERVO_CONTROL_ENABLED = True
SERVO_USES_ACCELEROMETER = True  # If True, accelerometer controls servo. If False, it sweeps.
AUDIO_ENABLED = True

# --- POWER SETUP ---
external_power = DigitalInOut(board.EXTERNAL_POWER)
external_power.direction = Direction.OUTPUT
external_power.value = True

# --- AUDIO PLAYBACK SETUP ---
if AUDIO_ENABLED:
    try:
        wave_file = open("StreetChicken.wav", "rb")
        wave = audiocore.WaveFile(wave_file)
        audio = audiobusio.I2SOut(board.I2S_BIT_CLOCK, board.I2S_WORD_SELECT, board.I2S_DATA)
        mixer = audiomixer.Mixer(voice_count=1, sample_rate=22050, channel_count=1,
                                 bits_per_sample=16, samples_signed=True)
        audio.play(mixer)
        mixer.voice[0].play(wave, loop=True)
        mixer.voice[0].level = 0.5
    except OSError:
        print("No WAV file found or audio hardware error. Skipping audio playback.")
        AUDIO_ENABLED = False

# --- SERVO CONTROL SETUP ---
if SERVO_CONTROL_ENABLED:
    pwm = pwmio.PWMOut(board.EXTERNAL_SERVO, duty_cycle=2 ** 15, frequency=50)
    prop_servo = servo.Servo(pwm)
    angle = 90
    angle_increment = 5
    prop_servo.angle = angle

# --- EXTERNAL BUTTON SETUP ---
switch = DigitalInOut(board.EXTERNAL_BUTTON)
switch.direction = Direction.INPUT
switch.pull = Pull.UP
switch_state = False

# --- NEOPIXEL SETUP ---
num_pixels = 7
pixels = neopixel.NeoPixel(
    board.EXTERNAL_NEOPIXELS,
    num_pixels,
    brightness=0.3,
    auto_write=False,
    pixel_order=neopixel.GRBW  # Set to RGBW mode
)

# --- ACCELEROMETER SETUP ---
i2c = board.I2C()
int1 = DigitalInOut(board.ACCELEROMETER_INTERRUPT)
lis3dh = adafruit_lis3dh.LIS3DH_I2C(i2c, int1=int1)
lis3dh.range = adafruit_lis3dh.RANGE_2_G

print("Setup complete. Starting main loop.")

# --- MAIN LOOP ---
still_threshold = 0.05  # Sensitivity for motion detection

while True:
    x, y, z = [
        value / adafruit_lis3dh.STANDARD_GRAVITY for value in lis3dh.acceleration
    ]

    # --- SERVO CONTROL ---
    if SERVO_CONTROL_ENABLED:
        if SERVO_USES_ACCELEROMETER:
            servo_angle = map_range(x, -1.0, 1.0, 0, 180)
            prop_servo.angle = max(0, min(180, servo_angle))
        else:
            angle += angle_increment
            if angle >= 180 or angle <= 0:
                angle_increment = -angle_increment
            prop_servo.angle = angle

    # --- LED MOTION & COLOR LOGIC ---
    if abs(x) < still_threshold and abs(y) < still_threshold and abs(z - 1.0) < still_threshold:
        # Still → white light
        for i in range(num_pixels):
            pixels[i] = (0, 0, 0, 255)  # Use white channel
    else:
        # Motion detected → set color based on x-axis tilt
        if x < -0.5:
            color = (255, 0, 0, 0)  # Red
        elif x < 0:
            color = (0, 255, 0, 0)  # Green
        elif x < 0.5:
            color = (0, 0, 255, 0)  # Blue
        else:
            color = (255, 255, 0, 0)  # Yellow

        for i in range(num_pixels):
            pixels[i] = color

    pixels.show()

    # --- BUTTON TOGGLE EXTERNAL POWER ---
    if not switch.value and not switch_state:
        print("Button pressed! Toggling external power.")
        external_power.value = not external_power.value
        switch_state = True
    if switch.value and switch_state:
        switch_state = False

    time.sleep(0.02)
